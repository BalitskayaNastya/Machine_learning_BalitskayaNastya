distances = function(obj, data, metric) {
cases = dim(data)[1]
dists = matrix(0, cases, 2)
for (i in 1:cases) {
cost = metric(obj, data[i,])
dists[i,] = c(cost, i)
}
idx = order(dists[,1])
data[dists[idx,2],]
}
kNN = function(obj, data, k, metric=dist) {
sorted = distances(obj, data, metric)
applykNN(sorted, k)
}
applykNN = function(sorted, k) {
n = dim(sorted)[2]-1
t = table(sorted[1:k,n+1])
which.max(t)
}
getLoo = function(x) {
l = dim(x)[1]
n = dim(x)[2] - 1
maxk = l
loo = rep(0, times=maxk)
for (i in 1:l) {
dists = distances(x[i,], x[-i,], dist)
for (k in 1:maxk) {
class = applykNN(dists, k)
if (as.integer(class) != as.integer(x[i,n+1])) {
loo[k] = loo[k] + 1
}
}
print(i)
print(loo)
}
loo = loo / l
return(loo)
}
par(mfrow=c(2,1))
colors = c("red", "blue", "green")
plot(res, col="blue")
lines(res, col="blue")
plot(selected[,1], selected[,2], col=colors[selected[,3]], pch=19)
xx = seq(from=1, to=7, by=0.1)
yy = seq(from=0, to=2.5, by=0.1)
for (x in xx) {
for (y in yy) {
obj = c(x, y, 0.0)
class = kNN(obj, selected, 6)
points(x, y, col=colors[class], pch=3)
}
}
xl = data[c(3,4,5)]
n = dim(xl)[2]-1
l = dim(xl)[1]
classes = levels(xl[,n+1])
colors = c("red", "green", "blue")
Nu = function(x, mu, cov) {
1/sqrt(2*pi*det(cov))*exp(-1/2*((x-mu) %*% solve(cov) %*% (x-mu)))
}
super = function(mu, cov, what=1) {
from = -3
to = 3
ticks = 200
det = det(cov)
a = cov[1,1]
b = cov[1,2]
c = cov[2,1]
d = cov[2,2]
mu1 = mu[1]
mu2 = mu[2]
A = d/det
B = (-b-c)/det
C = a/det
D = (-2*d*mu1 + b*mu2 + c*mu2)/det
E = (b*mu1 + c*mu1 - 2*a*mu2)/det
f = (d*mu1*mu1-b*mu1*mu2-c*mu1*mu2+a*mu2*mu2)/det
x = seq(from, to, (to - from) / ticks)
y = seq(from, to, (to - from) / ticks)
z = outer(x, y, function(x, y) 1/sqrt(2*pi*d) * exp(-1/2 * (A*x*x+B*y*x+C*y*y+D*x+E*y+f)))
if (what == 1) {
contour(x, y, z, levels=seq(0,1,0.05), drawlabels=T, asp=1)
} else {
mx = max(z)
mn = min(z)
l1 = length(x)
l2 = length(y)
pos = 1
mat = matrix(0, nrow=l1*l2, ncol=3)
for (i in 1:l1) {
for (j in 1:l2) {
col = rgb(z[i,j] / mx, 0, 0)
mat[pos,] = c(x[i], x[j], col)
pos = pos + 1
}
print(sprintf("%d", i))
}
print(mat)
plot(mat[,1], mat[,2], col=mat[,3], pch=22, asp=1)
}
}
par(mfrow=c(2,2))
what = 1
super(c(0,0), matrix(c(1,0,0,1), nrow=2, ncol=2), what=what)
super(c(0,0), matrix(c(1,1,0,1), nrow=2, ncol=2), what=what)
super(c(0,0), matrix(c(3,0,0,1), nrow=2, ncol=2), what=what)
super(c(0,0), matrix(c(1,0,0,3), nrow=2, ncol=2), what=what)
